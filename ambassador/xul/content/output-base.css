/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/* 
 * This file contains the CSS rules for the output window in ChatZilla.
 * The output window is layed out as a table with two columns.  The first
 * column holds a message type or a nickname, depending on what view the
 * message is contained by, and what kind of message it is.  The second column
 * contains the text of the message.  For most message types, ChatZilla displays
 * ascii-art instead of the actual code.  For example, messages of type "JOIN"
 * are displayed as "-->|", and most unclassified message types are displayed
 * as "===".  If you turn on debug messages (using the options->debug messages
 * menuitem) ChatZilla will always show the actual message type.  This can be
 * helpful when styling a particular response from the IRC server.  See the
 * description of the msg-type attribute below.
 *
 * You can modify these styles on your local system by placing your desired
 * styles in a file called ambassador.css in your <profile>/chrome directory.
 * (the file won't be there already, you have to create it.)  Add the line
 *
 *     @import url(ambassador.css);
 *
 * to your userContent.css (also in your <profile>/chrome directory, and
 * also not there unless you created it already.)  End all CSS rules in your
 * new ambassador.css with !important to override any styles declared here.
 * For example, on a Linux system, you would create a file called
 * /home/<username>/.mozilla/<username>/chrome/userContent.css (if it
 * doesn't already exist), and add the line @import url(ambassador.css) to it.
 * Next, create /home/<username>/.mozilla/<username>/chrome/ambassador.css, and
 * add the text:
 *
 *   .msg {
 *     font-size: 14pt !important;
 *   }
 *
 *   .ambassador-body {
 *     background: green !important;
 *   }
 *
 * Close your browser and restart.  When you bring up ChatZilla, it should have
 * a 14pt font and a green background.
 *
 * To learn how to make more useful changes to the ChatZilla output style, read
 * on.
 *
 * All of the output in the message window is contained in an html <TABLE>.
 * New messages are composed of <TR> and <TD> elements inside this <TABLE>.
 * The message table and it's children have the following CSS classes assigned
 * to them:
 *
 *  + .msg-table is used as the class for the surrounding <TABLE>.
 *    Styles applied to this class will affect all parts of all messages.
 *
 *  + .msg-nested-table  is used as the class for the surrounding <TABLE> for
 *     messages sent from users with long nicknames.  A new table is created, and
 *     nested inside a <TR colspan="2"> of the .msg-table.  The rows of this
 *     table have their classes set as if they were direct children of the 
 *     .msg-table.  Placing messages from users with long nicknames in a nested
 *      table keeps the nickname column from getting too wide.
 *
 *  + .msg is used as the class for the surrounding <TR>.  This means that
 *    any styles applied here will affect the entire message.
 *
 *  + .msg-timestamp is used as the class for the <TD> that has all the time
 *    information on it. Styles on this class will affect the time stamps
 *    against messages (but not the format of the time).
 *
 *  + .msg-type is used as the class for the <TD> surrounding the message type
 *    portion of messages.  Styles applied here will only affect message
 *    types.  ie. "-->|", or "[HELP]".
 *
 *  + .msg-user is used as the class for the <TD> surrounding the nickname
 *    portion of messages.  ChatZilla makes use of the :before and :after
 *    pseudoclasses to decorate nicknames with different characters depending
 *    on their message type.  For example, when a user performs a /me, their
 *    nickname may be surrounded by asterisks.
 *
 *  + .msg-data is used as the class for the <TD> surrounding the actual text
 *    of the message.
 *
 * In addition to CSS class properties, portions of a message may have one
 * or mode of the following attributes set:
 *
 *   + view-type is the type of view the message is contained in.  The types
 *     are:
 *          "IRCClient" for the *client* view
 *          "IRCNetwork" for network and server views
 *          "IRCChannel" for channel views
 *          "IRCUser" for query views
 *
 *   + msg-type is the message type described above.  There are too many types
 *     to list here.  Turn on debug messages to force message types to print
 *     in the left column of the output.
 *
 *   + msg-user is the nickname (in lowercase) of the nickname who sent the
 *     message.  If you sent the message, msg-user will be set to "ME!", so
 *     that you can style your messages regardless of your nickname.
 *
 *   + msg-dest is the name of the object that the message is directed to.  It
 *     could be a channel name, or a nickname (both in lowercase.)
 *  
 *   + dest-type is the type of object the message is directed to.  The types
 *     are:
 *          "IRCChannel" for messages sent to a channel.
 *          "IRCUser" for messages sent directly to another user, including
 *           private messages that appear in a network or channel view (when
 *           a dedicated query view does not exist.)
 *
 *   + mark is either the text "even" or "odd".  When the first user speaks on 
 *     a channel, that message is marked as "even".  Messages will continue to
 *     be marked "even" until a different user speaks, when the mark switches
 *     to "odd".  Each view maintains it's own mark state.  An example of how
 *     ChatZilla marks messages would be:
 *
 *            EVEN:   <moe> this deep fat fry-o-later is great.
 *            EVEN:   <moe> It'll deep fat fry a whole buffalo in 30 seconds.
 *             ODD: <homer> but I'm hungry *now*!
 *
 *   + important is either the text "true", or it is not set at all.  If
 *     important is true, then the message triggered ChatZilla /stalk function.
 *     This occurs when someone with a nickname matching a pattern in your
 *     /stalk list speaks, when someone says a word that matches a pattern in
 *     your /stalk list, or when someone says your nickname.
 */

#splash-wrapper {
    display: flex;
    height: 100vh;
    justify-content: center;
    align-items: center;
    overflow: hidden;
}

/******************************************************************************
 * basic classes                                                              *
 ******************************************************************************/

.ambassador-body {                 /* The topmost container in the Ambassador */
    margin: 0px 0px 0px 0px;       /* output window. */
    background: #FFFFFF;
    color: #000000;
}

a:link {
	color: #0000EE;
}
a:active {
	color: #EE0000;
}
a:visited {
	color: #551A8B;
}

/* links */
a.ambassador-link {
    text-decoration: none;
    direction: ltr;
    unicode-bidi: embed;
}

/* link hover effect */
a.ambassador-link:hover {
    text-decoration: underline;
}

/* line marker */
.ambassador-line-marker {
    box-shadow: 0px 2px black;
}

/* basic styles */
.ambassador-highlight[name="Large"] {
    font-size: larger;
}

.ambassador-highlight[name="Small"] {
    font-size: smaller;
}

.ambassador-highlight[name="Bold text"],
.ambassador-bold, a.ambassador-bold.ambassador-link {
    font-weight: bold;
}

.ambassador-italic {
    font-style: italic;
}

/* In CSS, text-decoration is a list of decorations to apply to the text.
 * However, as it is just one property, there is no way to apply it additively;
 * instead, we're forced to have all the 7 combinations (of 8 - one is none).
 */

.ambassador-overline {
    text-decoration: overline;
}

.ambassador-strikethough {
    text-decoration: line-through;
}

.ambassador-underline,
a.ambassador-underline.ambassador-link {
    text-decoration: underline;
}

.ambassador-overline.ambassador-strikethough {
    text-decoration: overline line-through;
}

.ambassador-overline.ambassador-underline,
a.ambassador-overline.ambassador-underline.ambassador-link {
    text-decoration: overline underline;
}

.ambassador-strikethough.ambassador-underline,
a.ambassador-strikethough.ambassador-underline.ambassador-link {
    text-decoration: line-through underline;
}

.ambassador-overline.ambassador-strikethough.ambassador-underline,
a.ambassador-overline.ambassador-strikethough.ambassador-underline.ambassador-link {
    text-decoration: overline line-through underline;
}

.ambassador-teletype {
    font-family: monospace;
}

.ambassador-rheet {
    font-weight: bold;
}

.ambassador-decor {
    display: none;
}

/* mirc colors */
.ambassador-fg00, a.ambassador-fg00.ambassador-link {
    color: #FFFFFF;
}

.ambassador-fg01, a.ambassador-fg01.ambassador-link {
    color: #000000;
}

.ambassador-fg02, a.ambassador-fg02.ambassador-link {
    color: #00007F;
}

.ambassador-fg03, a.ambassador-fg03.ambassador-link {
    color: #009300;
}

.ambassador-fg04, a.ambassador-fg04.ambassador-link {
    color: #FF0000;
}

.ambassador-fg05, a.ambassador-fg05.ambassador-link {
    color: #7F0000;
}

.ambassador-fg06, a.ambassador-fg06.ambassador-link {
    color: #9C009C;
}

.ambassador-fg07, a.ambassador-fg07.ambassador-link {
    color: #FC7F00;
}

.ambassador-fg08, a.ambassador-fg08.ambassador-link {
    color: #FFFF00;
}

.ambassador-fg09, a.ambassador-fg09.ambassador-link {
    color: #00FC00;
}

.ambassador-fg10, a.ambassador-fg10.ambassador-link {
    color: #009393;
}

.ambassador-fg11, a.ambassador-fg11.ambassador-link {
    color: #00FFFF;
}

.ambassador-fg12, a.ambassador-fg12.ambassador-link {
    color: #0000FC;
}

.ambassador-fg13, a.ambassador-fg13.ambassador-link {
    color: #FF00FF;
}

.ambassador-fg14, a.ambassador-fg14.ambassador-link {
    color: #7F7F7F;
}

.ambassador-fg15, a.ambassador-fg15.ambassador-link {
    color: #D2D2D2;
}

.ambassador-bg00, a.ambassador-bg00.ambassador-link {
    background-color: #FFFFFF;
}

.ambassador-bg01, a.ambassador-bg01.ambassador-link {
    background-color: #000000;
}

.ambassador-bg02, a.ambassador-bg02.ambassador-link {
    background-color: #00007F;
}

.ambassador-bg03, a.ambassador-bg03.ambassador-link {
    background-color: #009300;
}

.ambassador-bg04, a.ambassador-bg04.ambassador-link {
    background-color: #FF0000;
}

.ambassador-bg05, a.ambassador-bg05.ambassador-link {
    background-color: #7F0000;
}

.ambassador-bg06, a.ambassador-bg06.ambassador-link {
    background-color: #9C009C;
}

.ambassador-bg07, a.ambassador-bg07.ambassador-link {
    background-color: #FC7F00;
}

.ambassador-bg08, a.ambassador-bg08.ambassador-link {
    background-color: #FFFF00;
}

.ambassador-bg09, a.ambassador-bg09.ambassador-link {
    background-color: #00FC00;
}

.ambassador-bg10, a.ambassador-bg10.ambassador-link {
    background-color: #009393;
}

.ambassador-bg11, a.ambassador-bg11.ambassador-link {
    background-color: #00FFFF;
}

.ambassador-bg12, a.ambassador-bg12.ambassador-link {
    background-color: #0000FC;
}

.ambassador-bg13, a.ambassador-bg13.ambassador-link {
    background-color: #FF00FF;
}

.ambassador-bg14, a.ambassador-bg14.ambassador-link {
    background-color: #7F7F7F;
}

.ambassador-bg15, a.ambassador-bg15.ambassador-link {
    background-color: #D2D2D2;
}

.ambassador-control-char:before {
    content: "[\\";
}

.ambassador-control-char:after {
    content: "]";
}

/* smiley faces */
.ambassador-emote-txt {            /* emoticon text inside                    */
    display: none;
}

.ambassador-emote:after {          /* empty span to attach :after images to   */
    margin-left: 3px;
    margin-right: 3px;
    content: url(chrome://ambassador/skin/images/face-question.png);
}

.ambassador-emote[type="face-alien"]:after {
    content: url(chrome://ambassador/skin/images/face-alien.png);
}

.ambassador-emote[type="face-angry"]:after {
    content: url(chrome://ambassador/skin/images/face-angry.png);
}

.ambassador-emote[type="face-cry"]:after {
    content: url(chrome://ambassador/skin/images/face-cry.png);
}

.ambassador-emote[type="face-confused"]:after {
    content: url(chrome://ambassador/skin/images/face-confused.png);
}

.ambassador-emote[type="face-cool"]:after {
    content: url(chrome://ambassador/skin/images/face-cool.png);
}

.ambassador-emote[type="face-dizzy"]:after {
    content: url(chrome://ambassador/skin/images/face-dizzy.png);
}

.ambassador-emote[type="face-dizzy-back"]:after {
    content: url(chrome://ambassador/skin/images/face-dizzy-back.png);
}

.ambassador-emote[type="face-eek"]:after {
    content: url(chrome://ambassador/skin/images/face-eek.png);
}

.ambassador-emote[type="face-evil"]:after {
    content: url(chrome://ambassador/skin/images/face-evil.png);
}

.ambassador-emote[type="face-laugh"]:after {
    content: url(chrome://ambassador/skin/images/face-laugh.png);
}

.ambassador-emote[type="face-lol"]:after {
    content: url(chrome://ambassador/skin/images/face-lol.png);
}

.ambassador-emote[type="face-normal"]:after {
    content: url(chrome://ambassador/skin/images/face-normal.png);
}

.ambassador-emote[type="face-question"]:after {
    content: url(chrome://ambassador/skin/images/face-question.png);
}

.ambassador-emote[type="face-red"]:after {
    content: url(chrome://ambassador/skin/images/face-red.png);
}

.ambassador-emote[type="face-rofl"]:after {
    content: url(chrome://ambassador/skin/images/face-rofl.png);
}

.ambassador-emote[type="face-rolleyes"]:after {
    content: url(chrome://ambassador/skin/images/face-rolleyes.png);
}

.ambassador-emote[type="face-sad"]:after {
    content: url(chrome://ambassador/skin/images/face-sad.png);
}

.ambassador-emote[type="face-smile"]:after {
    content: url(chrome://ambassador/skin/images/face-smile.png);
}

.ambassador-emote[type="face-surprised"]:after {
    content: url(chrome://ambassador/skin/images/face-surprised.png);
}

.ambassador-emote[type="face-tongue"]:after {
    content: url(chrome://ambassador/skin/images/face-tongue.png);
}

.ambassador-emote[type="face-wink"]:after {
    content: url(chrome://ambassador/skin/images/face-wink.png);
}

/******************************************************************************
 * message class base definitions                                             *
 ******************************************************************************/

.msg-table {                                /* <TABLE> containing all of the  */
    width: 100%;                            /* messages.                      */
}

.msg-nested-table {                         /* <TABLE> nested inside          */
    width: 100%;                            /* .msg-table for users with long */
    margin: 0px;                            /* nicknames.                     */
    border: 0px;
    border-spacing: 0px;
    padding: 0px;
}

.msg {                                      /* .msg = a single message in the */
    width: 100%;                            /* output window                  */
}

.msg-timestamp {                            /* .msg-timestamp = timestamp for */
    font-style: normal !important;          /* the message, done using        */
    vertical-align: top;                    /* :before and content.           */
    white-space: nowrap;
}

.msg-type {                                 /* .msg-type = message type       */
    font-variant: small-caps;               /* indicator                      */
    font-size: 90%;
    padding-right: 10px;
    text-align: right;
    vertical-align: top;
    white-space: nowrap;
}

.msg-user {                                 /* msg-user = nickname portion of */
    text-align: right;                      /* a message (channel and query   */
    vertical-align: top;                    /* views)                         */
    white-space: nowrap;
}

.msg-data {                                 /* .msg-data = the text portion   */
    padding: 1px 1px 1px 3px;               /* of a message                   */
    width: 100%;
    white-space: pre-wrap;
}


/******************************************************************************
 * message class specific definitions                                         *
 ******************************************************************************/

/* msg-user is the nickname of the person who spoke, or "ME!" if you said it.
 * msg-type is the type of the message, taken from the irc message.  If you 
 * turn on debug messages (options->debug messages), the msg-types will be
 * displayed to the left of the messages for all messages except:
 * PRIVMSG: when a user sends you, or a channel you are on a message.
 * ACTION: when a user performs a /me.
 * NOTIFY: when a server or user sends you a notification.
 */
.msg[msg-user="|"] .msg-data,                /* messages from common "bulk    */
.msg[msg-user="||"] .msg-data,               /* paste" nicks                  */
.msg[msg-user="|||"] .msg-data,
.msg[msg-user="]"] .msg-data,
.msg[msg-user="["] .msg-data,
.msg[msg-type="372"] .msg-data,              /* MOTD                          */
.msg[msg-type="EVAL-IN"] .msg-data,          /* /eval results                 */
.msg[msg-type="EVAL-OUT"] .msg-data {
    font-size: 90%;
    font-family: monospace;
}

.msg[msg-type="USAGE"] .msg-data {
    font-style: italic;
}

.msg[msg-type="HELP"] .msg-data {
    font-weight: normal;
}

.msg[msg-type="ACTION"] .msg-user {
    font-style: italic;
}

.msg[important="true"] .msg-user {
    font-weight: bold;
}

/******************************************************************************
 * nickname decorations                                                       *
 ******************************************************************************/

/* :before and :after pseudoclasses form the decorations around nicknames */
.msg-user:before {
    content: "<";
}
.msg-user:after {
    content: ">";
}
.msg[important="true"] .msg-user:before {
    font-weight: bold;
}
.msg[important="true"] .msg-user:after {
    font-weight: bold;
}
.msg[msg-user$="ME!"] .msg-user:before {
    content: "<";
}
.msg[msg-user$="ME!"] .msg-user:after {
    content: ">";
}
.msg[msg-type="ACTION"] .msg-user:before,
.msg[msg-type="ACTION"] .msg-user:after {
    content: "";
}
.msg[msg-type="NOTICE"] .msg-user:before {
    content: "[";
}
.msg[msg-type="NOTICE"] .msg-user:after {
    content: "]";
}

/* private messages in a query window */
.msg[view-type="IRCUser"] .msg-user:before {
    content: "{";
}
.msg[view-type="IRCUser"] .msg-user:after {
    content: "}";
}
.msg[view-type="IRCUser"][msg-dest$="ME!"] .msg-user:before {
    content: "{";
}
.msg[view-type="IRCUser"][msg-dest$="ME!"] .msg-user:after {
    content: "}";
}

/* messages 'to' or 'from' somewhere other than where displayed */
.msg[to-other] .msg-user:before {
    content: "to(";
}
.msg[from-other] .msg-user:before {
    content: "from(";
}
.msg[to-other] .msg-user:after,
.msg[from-other] .msg-user:after {
    content: ")";
}
